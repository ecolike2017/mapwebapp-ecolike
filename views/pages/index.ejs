<!DOCTYPE html>
<html lang="en">
<head>
    <% include ../partials/head %>
    <link rel="stylesheet" href="/static/css/styles.css">
</head>
<body class="container">

    <header>
        <% include ../partials/header %>
    </header>

    <main>
        <div class="jumbotron">
            <h2>Liking Eco-friendly Activities Since 2017</h2>
            <div id="map"></div>
            <script>
              var ECOLIKE = {};
              <% if (activityId) {%>
              ECOLIKE.activityId="<%= activityId %>"
              <% } %>

              function initMap() {
                ECOLIKE.geocoder = new google.maps.Geocoder();

                // Load EcoLike data!
                loadEcoLikes(function(err) {
                  if (err) {
                    console.log('Error loading EcoLike data from backend. :(');
                    return;
                  }

                  determineMapCenterAndLoadMap();
                });


                // if coordinates passed in URL, use those.
                // else, geocode the Palo Alto address
                // codeAddress('Palo Alto, CA', function(err, location) {
                //   if (err) {
                //     console.log(err);
                //     location = {lat: -25.363, lng: 131.044};
                //   }
                //
                //   ECOLIKE.map = new google.maps.Map(document.getElementById('map'), {
                //     zoom: 12,
                //     center: location
                //   });
                //
                //   createMapMarkers();
                // });
              }

              function determineMapCenterAndLoadMap() {
                // default center location: Palo Alto, CA
                var center = {lat: 37.407581, lng: -122.1456352};

                if (ECOLIKE.activityId) {
                  // loop through data to find lat/lng center
                  for (var idx=0; idx < ECOLIKE.activityData.length; idx++) {
                    var oneActivity = ECOLIKE.activityData[idx];
                    if (oneActivity._id === ECOLIKE.activityId &&
                        coordsFromActivity(oneActivity) !== null) {
                      center = coordsFromActivity(oneActivity);
                      break;
                    }
                  }
                }

                ECOLIKE.map = new google.maps.Map(document.getElementById('map'), {
                  zoom: 12,
                  center: center
                });

                createMapMarkers(ECOLIKE.map);
                setTimeout(function() {
                  createHeatMap(ECOLIKE.map);
                }, 50);
              }

              function codeAddress(address, callback) {
                ECOLIKE.geocoder.geocode( { 'address': address }, function(results, status) {
                  var errMsg;
                  if (status == 'OK') {
                    callback(null, results[0].geometry.location);
                  } else {
                    errMsg = 'Geocode was not successful for the following reason: ' + status;
                    callback(new Error(errMsg));
                  }
                });
              }

              function loadEcoLikes(callback) {
                $.get('/api/ecolikes', function(data) {
                  ECOLIKE.activityData = data;
                  console.log(data);
                  callback();
                });
              }

              function coordsFromActivity(oneActivity) {
                if (oneActivity.geo && oneActivity.geo.type === 'Point') {
                  return {
                    lat: oneActivity.geo.coordinates[0],
                    lng: oneActivity.geo.coordinates[1]
                  };
                }
                if (oneActivity.place &&
                    oneActivity.place.bounding_box &&
                    oneActivity.place.bounding_box.type === 'Polygon' &&
                    oneActivity.place.bounding_box.coordinates &&
                    oneActivity.place.bounding_box.coordinates.length === 1) {
                      var latTotal = 0;
                      var lngTotal = 0;
                      var allCoords = oneActivity.place.bounding_box.coordinates[0];
                      for (var idx=0; idx < allCoords.length; idx++) {
                        var coord = allCoords[idx];
                        latTotal += coord[1];
                        lngTotal += coord[0];
                      }
                      return {
                        lat: latTotal / allCoords.length,
                        lng: lngTotal / allCoords.length
                      };
                    }
                return null;
              }

              function createMapMarkers(map) {
                ECOLIKE.activityData.forEach(function(oneLike) {
                  var coords = coordsFromActivity(oneLike);
                  // https://www.iconfinder.com/icons/307971/bio_eco_energy_farmer_flower_green_leaf_nature_plant_sheet_tree_icon
                  var image = 'https://eco-like.herokuapp.com/static/img/green_leaf_nature_plant_tree.png';

                  if (coords) {
                    var marker = new google.maps.Marker({
                      position: coords,
                      map: map,
                      icon: image
                    });

                    marker.addListener('click', function() {
                      showInfoWindow(map, marker, oneLike);
                    });

                    // Automatically open the info window if an activity was passed
                    // in as a query param.
                    if (ECOLIKE.activityId && oneLike._id === ECOLIKE.activityId) {
                      showInfoWindow(map, marker, oneLike);
                    }
                  }
                });
              }

              function showInfoWindow(map, marker, activityData) {
                console.log('activityData', activityData);
                var tweetText = activityData.display_text_range ? activityData.text.substring(activityData.display_text_range[0], activityData.display_text_range[1]) : activityData.text;
                var mediaContent = '';
                var ecoRating = 80;

                if (activityData.entities.media &&
                    activityData.entities.media.length > 0 &&
                    activityData.entities.media[0].type === 'photo') {
                  mediaContent = '<div class="tweetPhoto">'+
                    '<img src="'+activityData.entities.media[0].media_url_https+'"/>'+
                    '</div>';
                  ecoRating += 10;
                }
                ecoRating += getRandomInt(0, 10);


                var contentString = '<div id="content">'+
                  '<div class="profileImage">'+
                  '  <img src="'+activityData.user.profile_image_url_https+'">'+
                  '</div>'+

                  '<div class="nameAndTweet">'+
                  '  <span class="username">'+activityData.user.screen_name+'</span>'+
                  '  <div class="tweetText">'+
                  tweetText+
                  '  </div>'+
                  '</div>'+
                  '<div class="clear">&nbsp;</div>'+

                  mediaContent+
                  // if media entity, type=photo
                  '<h3 id="firstHeading" class="firstHeading">Eco-rating: '+ecoRating+'</h3>'+
                  '<div id="bodyContent">'+
                  '  <p><a href="https://go.nasa.gov/2pkza9H">NASA Worldview: Aerosol Depth Data</a></p>'+
                  '</div>'+
                  '</div>';

                var infowindow = new google.maps.InfoWindow({
                  content: contentString
                });
                infowindow.open(map, marker);
              }

              function createHeatMap(map) {
                var heatmapData = [];
                var HEATMAP_NUM = 8;

                var bounds = map.getBounds();
                var nePoint = bounds.getNorthEast();
                var swPoint = bounds.getSouthWest();

                for (var i = 0; i < HEATMAP_NUM; i++) {
                  // var coords = results.features[i].geometry.coordinates;
                  var lat = getRandomArbitrary(swPoint.lat(), nePoint.lat());
                  var lng = getRandomArbitrary(swPoint.lng(), nePoint.lng());
                  var latLng = new google.maps.LatLng(lat, lng);
                  var magnitude = getRandomArbitrary(1, 10);
                  var weightedLoc = {
                    location: latLng,
                    weight: magnitude
                  };
                  console.log('heat data', lat, lng, weightedLoc);
                  heatmapData.push(weightedLoc);
                }
                var heatmap = new google.maps.visualization.HeatmapLayer({
                  data: heatmapData,
                  dissipating: false,
                  map: map
                });

              }

              function getRandomArbitrary(min, max) {
                return (Math.random() * (max - min)) + min;
              }

              function getRandomInt(min, max) {
                min = Math.ceil(min);
                max = Math.floor(max);
                return Math.floor(Math.random() * (max - min)) + min;
              }
            </script>
            <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAjJoTBPnabLs9mn3BbOUQtPURdG6U51iA&libraries=visualization&callback=initMap">
            </script>
        </div>
    </main>

    <footer>
        <% include ../partials/footer %>
    </footer>

</body>
</html>
